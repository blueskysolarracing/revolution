from ctypes import Structure
from types import TracebackType
from typing import Any, Literal

KERNEL_VERSION: tuple[int, int]

class GPIOError(IOError): ...

class EdgeEvent:
    def __new__(cls, edge: Literal['rising', 'falling'], timestamp: int) -> EdgeEvent: ...

class GPIO:
    def __new__(cls, *args: Any, **kwargs: Any) -> GPIO: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> GPIO: ...
    def __exit__(self, t: type[BaseException] | None, value: BaseException | None, traceback: TracebackType | None) -> None: ...
    def read(self) -> bool: ...
    def write(self, value: bool) -> None: ...
    def poll(self, timeout: int | float | None = ...) -> bool: ...
    def read_event(self) -> EdgeEvent: ...
    @staticmethod
    def poll_multiple(gpios: list[GPIO], timeout: int | float | None = ...) -> list[GPIO]: ...
    def close(self) -> None: ...
    @property
    def devpath(self) -> str: ...
    @property
    def fd(self) -> int: ...
    @property
    def line(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def label(self) -> str: ...
    @property
    def chip_fd(self) -> int: ...
    @property
    def chip_name(self) -> str: ...
    @property
    def chip_label(self) -> str: ...
    direction: Literal['in', 'out', 'high', 'low']
    edge: Literal['none', 'rising', 'falling', 'both']
    bias: Literal['default', 'pull_up', 'pull_down', 'disable']
    drive: Literal['default', 'open_drain', 'open_source']
    inverted: bool

class _CGpiochipInfo(Structure): ...
class _CGpiolineInfo(Structure): ...
class _CGpiohandleRequest(Structure): ...
class _CGpiohandleData(Structure): ...
class _CGpioeventRequest(Structure): ...
class _CGpioeventData(Structure): ...

class CdevGPIO(GPIO):
    def __init__(
        self,
        path: str,
        line: int | str,
        direction: Literal['in', 'out', 'high', 'low'],
        edge: Literal['none', 'rising', 'falling', 'both'] = ...,
        bias: Literal['default', 'pull_up', 'pull_down', 'disable'] = ...,
        drive: Literal['default', 'open_drain', 'open_source'] = ...,
        inverted: bool = ...,
        label: str | None = ...,
    ) -> None: ...

class SysfsGPIO(GPIO):
    GPIO_OPEN_RETRIES: int
    GPIO_OPEN_DELAY: float
    def __init__(self, line: int, direction: str) -> None: ...
